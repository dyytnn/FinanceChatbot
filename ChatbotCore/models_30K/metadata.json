{
  "domain": {
    "version": "3.1",
    "intents": [
      "Bận_Công tác_Đám cưới_ma",
      "FAQ_Hỏi ngày đến hạn",
      "FAQ_Hỏi thông tin người gọi đến",
      "FAQ_Hỏi thứ_ngày_tháng",
      "FAQ_KH muốn hỏi thông tin",
      "FAQ_Không nghe rõ",
      "FAQ_Kỳ thanh toán",
      "FAQ_Quy trình gọi",
      "FAQ_Số tiền_Sản phẩm",
      "Hết tiền_khó khăn tài chính",
      "Hứa thanh toán có ngày",
      "Khách hàng phản hồi",
      "Thái độ người nghe không tốt",
      "Tất toán khoản vay",
      "Từ chối thanh toán trước hạn",
      "Từ chối vì chưa nhận khoản vay",
      "Từ chối vì thắc mắc thông tin khoản vay",
      "bi_om_benh",
      "faq_chua_nhan_duoc_tin_nhan",
      "faq_hoi_kenh_thanh_toan",
      "faq_lai_suat",
      "faq_yeu_cau_gui_ma_hop_dong",
      "khach_hang_mat",
      "khong_dong_y",
      "mat_viec_that_nghiep_lam_an_thua_lo",
      "nguoi_than_nghe_may",
      "thanh_toan_mot_phan",
      "thanh_toan_tre",
      "tre_luong",
      "tu_choi_khong_ly_do",
      "Đã thanh toán khoản vay",
      "Đồng ý",
      "Đồng ý thanh toán"
    ],
    "entities": [
      "relative",
      "acquaintance",
      "timeframe",
      "debt_organization",
      "phone_number",
      "card_number",
      "payment_status",
      "debt_denial_reason",
      "payment_method"
    ],
    "responses": {
      "utter_saybye": [
        {
          "text": "Dạ em chào anh ạ."
        }
      ],
      "utter_greeting_and_request": [
        {
          "text": "Chào anh/chị (đb)(db). Em là Thanh gọi từ công ty tài chính Finance, rất vui được kết nối với anh/chị (đb). Cho em xin ít phút để trao đổi thông tin được không ạ?"
        }
      ],
      "utter_remind_payment_before_due_date": [
        {
          "text": "Dạ, anh/chị (đb) có khoản vay trước đó và đã được chuyển đổi thành khoản trả góp trên Thẻ tín dụng, sắp tới hạn thanh toán với số tiền là [ne_emi] đồng. anh/chị (đb) thu xếp đóng trước ngày (dd/mm/yy) giúp bên em nha anh/chị (đb)."
        },
        {
          "text": "Dạ, anh/chị (đb) có hợp đồng Thẻ tín dụng sắp tới hạn thanh toán với tổng dư nợ trên sao kê là 100 tỷ đồng, anh/chị (đb) có thể thu xếp đóng số tiền tối thiểu [ne_emi] đồng, trước ngày (dd/mm/yy) giúp bên em nha anh/chị (đb)"
        }
      ],
      "utter_remind_payment_on_due_date": [
        {
          "text": "Dạ, anh/chị (đb) có khoản vay trước đó và được chuyển đổi thành khoản trả góp trên Thẻ tín dụng, đã đến hạn thanh toán. Mình vui lòng thu xếp đóng số tiền [ne_emi] đồng trong ngày hôm nay giúp bên em nha anh/chị (đb)."
        },
        {
          "text": "Dạ, anh/chị (đb) có hợp đồng Thẻ tín dụng đã đến hạn thanh toán với tổng dư nợ trên sao kê là 100 tỷ đồng. Mình vui lòng thu xếp đóng số tiền tối thiểu [ne_emi] đồng trong ngày hôm nay giúp bên em nha anh/chị (đb)"
        }
      ],
      "utter_remind_payment_after_due_date": [
        {
          "text": "Dạ, anh/chị (đb) có khoản vay trước đó và được chuyển đổi thành khoản trả góp trên Thẻ tín dụng, đã trễ hạn 1 ngày. Mình thu xếp đóng số tiền anh/chị (đb) trước 17g hôm nay cho bên em nha?"
        },
        {
          "text": "Dạ, anh/chị (đb) có hợp đồng Thẻ tín dụng đã trễ hạn 1 ngày với tổng dư nợ trên sao kê là 100 tỷ đồng. Mình thu xếp đóng số tiền tối thiểu [ne_emi] trước 17g hôm nay cho bên em nha?"
        }
      ],
      "utter_end_call": [
        {
          "text": "Dạ, hiện tín hiệu đường truyền không ổn định. Em xin phép gác máy và gọi lại sau. Cần hỗ trợ thêm thông tin anh/chị (đb) vui lòng liên hệ tổng đài 1900 6939. Cảm ơn và chúc anh/chị (đb) một ngày tốt lành."
        },
        {
          "text": "Dạ, em ghi nhận thông tin và xin phép gọi lại sau. Cần hỗ trợ thêm thông tin anh/chị (đb) vui lòng liên hệ tổng đài 1900 6939. Cảm ơn và chúc anh/chị (đb) một ngày tốt lành"
        }
      ],
      "utter_remind_payment": [
        {
          "text": "Dạ vâng, em xin nhắc lại thông tin đến anh/chị (đb) + Câu trước đó đã thông báo"
        },
        {
          "text": "Dạ, Em nghe chưa rõ thông tin từ [ne_titl cho em xin hỏi lại anh/chị (đb) sẽ đi thanh toán cho Thẻ tín dụng với số tiền [ne_emi] đồng trước ngày (dd/mm/yy) phải không?"
        },
        {
          "text": "Dạ, anh/chị (đb) ơi, em nghe chưa rõ thông tin, cho em xác nhận lại anh/chị (đb) sẽ đi thanh toán Thẻ tín dụng với số tiền [ne_emi] đồng trong ngày hôm nay giúp em nha anh/chị (đb)?"
        },
        {
          "text": "Dạ, anh/chị (đb) ơi, em nghe không rõ thông tin từ [ne_titl cho em xác nhận lại là anh/chị (đb) đi thanh toán Thẻ tín dụng với số tiền [ne_emi] đồng ngay bây giờ nha"
        }
      ],
      "utter_arrange_payment": [
        {
          "text": "Dạ, anh/chị (đb) thu xếp đóng tiền sớm trước ngày (dd/mm/yy)ho bên em, nha anh/chị (đb) ?"
        },
        {
          "text": "Dạ, anh/chị (đb) thu xếp đóng tiền trễ nhất ngày (dd/mm/yy)ho bên em, nha anh/chị (đb) ?"
        },
        {
          "text": "Dạ, anh/chị (đb) thu xếp đóng tiền sớm trong hôm nay cho bên em, nha anh/chị (đb) ?"
        }
      ],
      "utter_payment_method": [
        {
          "text": "Dạ, vậy anh/chị (đb) cố gắng thu xếp thanh toán trước ngày (dd/mm/yy)ua momo hoặc thế giới di động. Thanh toán xong giữ lại biên lai giúp em. Cảm ơn và chúc anh/chị (đb) 1 ngày tốt lành ạ."
        },
        {
          "text": "Dạ, anh/chị (đb) cố gắng thu xếp thanh toán sớm trước ngày (dd/mm/yy)ua momo hoặc thế giới di động. Thanh toán xong giữ lại biên lai giúp em. Cảm ơn và chúc anh/chị (đb) 1 ngày tốt lành ạ."
        },
        {
          "text": "Dạ vâng, anh/chị (đb) thu xếp thanh toán sớm trong ngày hôm nay qua momo hoặc thế giới di động, để không phát sinh chi phí ngoài kế hoạch do thanh toán trễ. Đóng tiền xong giữ lại biên lai giúp em. Cảm ơn và chúc anh/chị (đb) 1 ngày tốt lành ạ."
        },
        {
          "text": "Dạ vâng, vậy bây giờ anh/chị (đb) thanh toán qua momo hoặc thế giới di động luôn nha, để không phát sinh chi phí ngoài kế hoạch do tiền chuyển chậm, chuyển trễ. Thanh toán xong giữ lại biên lai giúp em. Cảm ơn và chúc anh/chị (đb) 1 ngày tốt lành ạ"
        }
      ],
      "utter_understand_difficulty": [
        {
          "text": "Dạ, em hiểu. Tuy nhiên hợp đồng của mình trước đó đã nhận được rất nhiều ưu đãi. Để không phát sinh chi phí ngoài kế hoạch do thanh toán trễ. anh/chị (đb) nên cố gắng đóng tiền đúng hạn giúp bên em. Cảm ơn và chúc anh/chị (đb) một ngày tốt lành"
        },
        {
          "text": "Dạ, em hiểu. Tuy nhiên để không phát sinh chi phí ngoài kế hoạch do thanh toán trễ. anh/chị (đb) cố gắng mượn tiền người thân, để đóng tiền đúng hạn giúp bên em. Cảm ơn và chúc anh/chị (đb) một ngày tốt lành"
        },
        {
          "text": "Em hiểu vấn đề của anh/chị (đb). Tuy nhiên hợp đồng đã trễ hạn một ngày, nên em không thể hỗ trợ. Do trước đó mình đã nhận được rất nhiều ưu đãi. Để không phát sinh chi phí ngoài kế hoạch do thanh toán trễ. anh/chị (đb) nên đóng tiền sớm cho bên em. Cảm ơn và chào anh/chị (đb) ạ."
        },
        {
          "text": "Dạ, em hiểu. Tuy nhiên, do hợp đồng đã trễ hạn một ngày, em không thể hỗ trợ thêm. Để không phát sinh chi phí ngoài kế hoạch do thanh toán trễ. Vì vậy anh/chị (đb) nên thu xếp đóng tiền sớm cho bên em. Cảm ơn và chào anh/chị (đb) ạ"
        }
      ],
      "utter_inquiry_info": [
        {
          "text": "Dạ mình có quen ai tên (db) không ạ?"
        },
        {
          "text": "Dạ cho em xin phép hỏi, hiện tại mình dùng số điện thoại này bao lâu rồi?. Đã đăng ký sim chính chủ chưa?. Anh chị vui lòng cho em xin thông tin, vì số điện thoại này có trong hợp đồng Thẻ tín dụng bên công ty em ạ."
        },
        {
          "text": "Dạ bên em ghi nhận và sẽ kiểm tra lại thông tin của mình, nếu có thắc mắc anh/chị (đb) liên hệ số 1 9 0 0  6 9 3 9 để bên em hỗ trợ thêm. Em cảm ơn và chào anh/chị (đb)"
        }
      ],
      "utter_phanhoikonhancuocgoi": [
        {
          "text": "Anh chị không thể ngưng quá trình này cho đến khi anh chị hoàn tất hợp đồng"
        }
      ]
    },
    "session_config": {
      "session_expiration_time": 60,
      "carry_over_slots_to_new_session": true
    }
  },
  "trained_at": "2024-03-21T09:30:56.231223",
  "model_id": "2ed01c05708f4c2e9145c9a9a3562160",
  "assistant_id": "20240320-204246-randomized-strategy",
  "rasa_open_source_version": "3.6.13",
  "train_schema": {
    "nodes": {
      "schema_validator": {
        "needs": {
          "importer": "__importer__"
        },
        "uses": "rasa.graph_components.validators.default_recipe_validator.DefaultV1RecipeValidator",
        "constructor_name": "create",
        "fn": "validate",
        "config": {},
        "eager": false,
        "is_target": false,
        "is_input": true,
        "resource": null
      },
      "finetuning_validator": {
        "needs": {
          "importer": "schema_validator"
        },
        "uses": "rasa.graph_components.validators.finetuning_validator.FinetuningValidator",
        "constructor_name": "create",
        "fn": "validate",
        "config": {
          "validate_core": false,
          "validate_nlu": true
        },
        "eager": false,
        "is_target": false,
        "is_input": true,
        "resource": null
      },
      "nlu_training_data_provider": {
        "needs": {
          "importer": "finetuning_validator"
        },
        "uses": "rasa.graph_components.providers.nlu_training_data_provider.NLUTrainingDataProvider",
        "constructor_name": "create",
        "fn": "provide",
        "config": {
          "language": "vi",
          "persist": false
        },
        "eager": false,
        "is_target": false,
        "is_input": true,
        "resource": null
      },
      "run_vietnamese_tokenizer.VietnameseTokenizer0": {
        "needs": {
          "training_data": "nlu_training_data_provider"
        },
        "uses": "vietnamese_tokenizer.VietnameseTokenizer",
        "constructor_name": "load",
        "fn": "process_training_data",
        "config": {},
        "eager": false,
        "is_target": false,
        "is_input": false,
        "resource": null
      },
      "train_LexicalSyntacticFeaturizer1": {
        "needs": {
          "training_data": "run_vietnamese_tokenizer.VietnameseTokenizer0"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.lexical_syntactic_featurizer.LexicalSyntacticFeaturizer",
        "constructor_name": "create",
        "fn": "train",
        "config": {
          "intent_split_symbol": "+",
          "intent_tokenization_flag": true
        },
        "eager": false,
        "is_target": true,
        "is_input": false,
        "resource": null
      },
      "run_LexicalSyntacticFeaturizer1": {
        "needs": {
          "training_data": "run_vietnamese_tokenizer.VietnameseTokenizer0",
          "resource": "train_LexicalSyntacticFeaturizer1"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.lexical_syntactic_featurizer.LexicalSyntacticFeaturizer",
        "constructor_name": "load",
        "fn": "process_training_data",
        "config": {
          "intent_split_symbol": "+",
          "intent_tokenization_flag": true
        },
        "eager": false,
        "is_target": false,
        "is_input": false,
        "resource": null
      },
      "train_CountVectorsFeaturizer2": {
        "needs": {
          "training_data": "run_LexicalSyntacticFeaturizer1"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer.CountVectorsFeaturizer",
        "constructor_name": "create",
        "fn": "train",
        "config": {},
        "eager": false,
        "is_target": true,
        "is_input": false,
        "resource": null
      },
      "run_CountVectorsFeaturizer2": {
        "needs": {
          "training_data": "run_LexicalSyntacticFeaturizer1",
          "resource": "train_CountVectorsFeaturizer2"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer.CountVectorsFeaturizer",
        "constructor_name": "load",
        "fn": "process_training_data",
        "config": {},
        "eager": false,
        "is_target": false,
        "is_input": false,
        "resource": null
      },
      "train_CountVectorsFeaturizer3": {
        "needs": {
          "training_data": "run_CountVectorsFeaturizer2"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer.CountVectorsFeaturizer",
        "constructor_name": "create",
        "fn": "train",
        "config": {
          "analyzer": "char_wb",
          "min_ngram": 1,
          "max_ngram": 4
        },
        "eager": false,
        "is_target": true,
        "is_input": false,
        "resource": null
      },
      "run_CountVectorsFeaturizer3": {
        "needs": {
          "training_data": "run_CountVectorsFeaturizer2",
          "resource": "train_CountVectorsFeaturizer3"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer.CountVectorsFeaturizer",
        "constructor_name": "load",
        "fn": "process_training_data",
        "config": {
          "analyzer": "char_wb",
          "min_ngram": 1,
          "max_ngram": 4
        },
        "eager": false,
        "is_target": false,
        "is_input": false,
        "resource": null
      },
      "train_DIETClassifier4": {
        "needs": {
          "training_data": "run_CountVectorsFeaturizer3"
        },
        "uses": "rasa.nlu.classifiers.diet_classifier.DIETClassifier",
        "constructor_name": "create",
        "fn": "train",
        "config": {
          "random_seed": 42,
          "intent_classification": true,
          "entity_recognition": true,
          "epochs": 300,
          "learning_rate": 0.002,
          "embedding_dimension": 60,
          "number_of_transformer_layers": 1,
          "batch_size": 64,
          "hidden_layer_sizes": null,
          "text": [
            256,
            128
          ]
        },
        "eager": false,
        "is_target": true,
        "is_input": false,
        "resource": null
      },
      "train_ResponseSelector5": {
        "needs": {
          "training_data": "run_CountVectorsFeaturizer3"
        },
        "uses": "rasa.nlu.selectors.response_selector.ResponseSelector",
        "constructor_name": "create",
        "fn": "train",
        "config": {
          "epochs": 800,
          "retrieval_intent": "faq"
        },
        "eager": false,
        "is_target": true,
        "is_input": false,
        "resource": null
      },
      "train_EntitySynonymMapper6": {
        "needs": {
          "training_data": "run_CountVectorsFeaturizer3"
        },
        "uses": "rasa.nlu.extractors.entity_synonyms.EntitySynonymMapper",
        "constructor_name": "create",
        "fn": "train",
        "config": {},
        "eager": false,
        "is_target": true,
        "is_input": false,
        "resource": null
      }
    }
  },
  "predict_schema": {
    "nodes": {
      "nlu_message_converter": {
        "needs": {
          "messages": "__message__"
        },
        "uses": "rasa.graph_components.converters.nlu_message_converter.NLUMessageConverter",
        "constructor_name": "load",
        "fn": "convert_user_message",
        "config": {},
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": null
      },
      "run_vietnamese_tokenizer.VietnameseTokenizer0": {
        "needs": {
          "messages": "nlu_message_converter"
        },
        "uses": "vietnamese_tokenizer.VietnameseTokenizer",
        "constructor_name": "load",
        "fn": "process",
        "config": {},
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": null
      },
      "run_LexicalSyntacticFeaturizer1": {
        "needs": {
          "messages": "run_vietnamese_tokenizer.VietnameseTokenizer0"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.lexical_syntactic_featurizer.LexicalSyntacticFeaturizer",
        "constructor_name": "load",
        "fn": "process",
        "config": {
          "intent_split_symbol": "+",
          "intent_tokenization_flag": true
        },
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": {
          "name": "train_LexicalSyntacticFeaturizer1",
          "output_fingerprint": "5cbcdce5c42e45aabea498cac7a6c4df"
        }
      },
      "run_CountVectorsFeaturizer2": {
        "needs": {
          "messages": "run_LexicalSyntacticFeaturizer1"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer.CountVectorsFeaturizer",
        "constructor_name": "load",
        "fn": "process",
        "config": {},
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": {
          "name": "train_CountVectorsFeaturizer2",
          "output_fingerprint": "8dd3e0c02a934e3c99386faa0ab58bf8"
        }
      },
      "run_CountVectorsFeaturizer3": {
        "needs": {
          "messages": "run_CountVectorsFeaturizer2"
        },
        "uses": "rasa.nlu.featurizers.sparse_featurizer.count_vectors_featurizer.CountVectorsFeaturizer",
        "constructor_name": "load",
        "fn": "process",
        "config": {
          "analyzer": "char_wb",
          "min_ngram": 1,
          "max_ngram": 4
        },
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": {
          "name": "train_CountVectorsFeaturizer3",
          "output_fingerprint": "619eed075f374fdc9b34cd9d363b8111"
        }
      },
      "run_DIETClassifier4": {
        "needs": {
          "messages": "run_CountVectorsFeaturizer3"
        },
        "uses": "rasa.nlu.classifiers.diet_classifier.DIETClassifier",
        "constructor_name": "load",
        "fn": "process",
        "config": {
          "random_seed": 42,
          "intent_classification": true,
          "entity_recognition": true,
          "epochs": 300,
          "learning_rate": 0.002,
          "embedding_dimension": 60,
          "number_of_transformer_layers": 1,
          "batch_size": 64,
          "hidden_layer_sizes": null,
          "text": [
            256,
            128
          ]
        },
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": {
          "name": "train_DIETClassifier4",
          "output_fingerprint": "dd73319935204474ae28e8821c72682a"
        }
      },
      "run_ResponseSelector5": {
        "needs": {
          "messages": "run_DIETClassifier4"
        },
        "uses": "rasa.nlu.selectors.response_selector.ResponseSelector",
        "constructor_name": "load",
        "fn": "process",
        "config": {
          "epochs": 800,
          "retrieval_intent": "faq"
        },
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": {
          "name": "train_ResponseSelector5",
          "output_fingerprint": "3cdb8e0fc63c4ca8ae5d6d1d0d989c71"
        }
      },
      "run_EntitySynonymMapper6": {
        "needs": {
          "messages": "run_ResponseSelector5"
        },
        "uses": "rasa.nlu.extractors.entity_synonyms.EntitySynonymMapper",
        "constructor_name": "load",
        "fn": "process",
        "config": {},
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": {
          "name": "train_EntitySynonymMapper6",
          "output_fingerprint": "157d9e84eb0d49ea892b8ee4ca362d19"
        }
      },
      "run_RegexMessageHandler": {
        "needs": {
          "messages": "run_EntitySynonymMapper6"
        },
        "uses": "rasa.nlu.classifiers.regex_message_handler.RegexMessageHandler",
        "constructor_name": "load",
        "fn": "process",
        "config": {},
        "eager": true,
        "is_target": false,
        "is_input": false,
        "resource": null
      }
    }
  },
  "training_type": 1,
  "project_fingerprint": "12064874644ee512d646c88e238c406d70442923486507148ac4e6c0ab4da09e",
  "core_target": null,
  "nlu_target": "run_RegexMessageHandler",
  "language": "vi",
  "spaces": null
}