{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import openai\n",
    "from langchain.chat_models import ChatOpenAI\n",
    "from dotenv import load_dotenv, find_dotenv\n",
    "import pandas as pd\n",
    "import re\n",
    "from langchain.output_parsers import ResponseSchema\n",
    "from langchain.output_parsers import StructuredOutputParser\n",
    "from langchain.prompts import ChatPromptTemplate\n",
    "\n",
    "os.environ['OPENAI_API_KEY'] = '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'\n",
    "_ = load_dotenv(find_dotenv())\n",
    "openai.api_key = os.environ['OPENAI_API_KEY']\n",
    "chat = ChatOpenAI(model_name=\"gpt-4\", temperature=0, max_tokens = 3000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "review_template = \"\"\"\\\n",
    "    Tôi cần tạo data cho chatbot về một cuộc trò chuyện của một nhân viên nhắc nợ và người nợ. Tôi sử dụng rasa\n",
    "    Tôi sẽ cung cấp cho bạn response nhắc nợ của bot (script)\n",
    "    {script_utter} \\n\n",
    "\n",
    "    đây là các câu response của bot chat bạn có thể giúp tôi phân loại nó thành các utter tương ứng theo\n",
    "    format dạng json\n",
    "    utter_name_class1:\n",
    "        script_intention corresponding\n",
    "        script_intention corresponding\n",
    "\n",
    "    utter_name_class2:\n",
    "        script_intention corresponding\n",
    "    \n",
    "    utter_name_class3:\n",
    "        script_intention corresponding\n",
    "        script_intention corresponding\n",
    "        script_intention corresponding\n",
    "\n",
    "    utter_name_class3 là utter bạn phân loại, script_intention corresponding là script tương ứng tôi cung cấp\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "User_template = \"\"\"\\\n",
    "    tôi đang làm rasa chat bot về việc nhắc nợ và đòi nợ và tôi đã có các utter-class và\n",
    "    Tôi sẽ cung cấp cho bạn các class đó cùng với các response nhắc nợ của bot (script)\n",
    "    {script_utter} \\n\n",
    "\n",
    "    đây là các câu response của bot chat bạn có thể giúp tôi tạo ra các câu nói mà bot có thể nhận được từ người dùng \n",
    "    thực tế tương ứng với mỗi class utter không, các câu nên có thái độ giống với thực tế nhất ví dụ như tục tiễu giận dữ \n",
    "    format dạng json\n",
    "    utter_name_class1:\n",
    "        script_intention corresponding\n",
    "        script_intention corresponding\n",
    "\n",
    "    utter_name_class2:\n",
    "        script_intention corresponding\n",
    "    \n",
    "    utter_name_class3:\n",
    "        script_intention corresponding\n",
    "        script_intention corresponding\n",
    "        script_intention corresponding\n",
    "\n",
    "    utter_name_class3 là utter bạn phân loại, script_intention corresponding là script tương ứng tôi cung cấp\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel(\"20230904_Athena_Voicebot_Card_Predue_Scenario.xlsx\",2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>#Script</th>\n",
       "      <th>Intention</th>\n",
       "      <th>Prompt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chào [ne_title][ne_name]. Em là Thanh gọi từ c...</td>\n",
       "      <td>Agree (là khách hàng)</td>\n",
       "      <td>Xác nhận lại mình là khách hàng</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             #Script              Intention  \\\n",
       "0  Chào [ne_title][ne_name]. Em là Thanh gọi từ c...  Agree (là khách hàng)   \n",
       "\n",
       "                            Prompt  \n",
       "0  Xác nhận lại mình là khách hàng  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "utter_script = df['#Script'].unique()\n",
    "cls_utter = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0, len(utter_script), 10):\n",
    "    script = f\"\"\"\n",
    "        {utter_script[i : i + 10]}\n",
    "    \"\"\"\n",
    "    prompt_template = ChatPromptTemplate.from_template(template=review_template)\n",
    "    messages = prompt_template.format_messages(\n",
    "        script_utter=script, \n",
    "    )\n",
    "    response = chat(messages).content\n",
    "\n",
    "    cls_utter.append(response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('utter.txt', 'w') as f:\n",
    "    for content in cls_utter:\n",
    "        f.write(f'{content} \\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('generate.md', 'r', encoding='utf-8') as file:\n",
    "    utter = file.readlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "script = f\"\"\"\n",
    "    {utter}\n",
    "\"\"\"\n",
    "prompt_template = ChatPromptTemplate.from_template(template=User_template)\n",
    "messages = prompt_template.format_messages(\n",
    "    script_utter=script, \n",
    ")\n",
    "response = chat(messages).content\n",
    "\n",
    "cls_utter.append(response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "rasaloz",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
